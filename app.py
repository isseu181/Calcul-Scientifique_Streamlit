import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.integrate import quad, solve_ivp
from scipy.interpolate import interp1d
from scipy.signal import TransferFunction, step, bode
from scipy.optimize import fsolve
import pulp
import sympy as sp
from sympy import symbols, integrate, pi, cos, sin, simplify, sympify, lambdify

st.set_page_config(page_title="CalculLAB Web", layout="centered", page_icon="üî¨")

# Variable d'√©tat pour g√©rer la page actuelle
if 'current_page' not in st.session_state:
    st.session_state.current_page = "Accueil"

# D√©finir les pages disponibles
PAGES = {
    "Accueil": "Accueil",
    "Calcul d‚Äôint√©grale": "Calcul d‚Äôint√©grale",
    "Interpolation": "Interpolation",
    "Analyse de fonction de transfert": "Analyse de fonction de transfert",
    "√âquations diff√©rentielles": "√âquations diff√©rentielles",
    "Int√©gration num√©rique": "Int√©gration num√©rique",
    "Syst√®mes lin√©aires": "Syst√®mes lin√©aires",
    "D√©composition LU": "D√©composition LU",
    "Applications Laser": "Applications Laser",
    "Optimisation lin√©aire": "Optimisation lin√©aire",
    "S√©ries de Fourier": "S√©ries de Fourier",
    "Data Science": "Data Science",
    "Gestion √ânerg√©tique": "Gestion √ânerg√©tique",
    "Navier-Stokes": "Navier-Stokes",
    "Num√©risation": "Num√©risation"
}

# Page d'accueil
def show_home_page():
    st.markdown("""
    <style>
    .big-font {
        font-size:36px !important;
        text-align: center;
        margin-bottom: 30px;
    }
    .button-container {
        display: flex;
        flex-direction: column;
        gap: 15px;
        max-width: 500px;
        margin: 0 auto;
    }
    .stButton>button {
        width: 100%;
        padding: 15px;
        font-size: 18px;
        border-radius: 10px;
        background-color: #4e73df;
        color: white;
        border: none;
        transition: all 0.3s;
    }
    .stButton>button:hover {
        background-color: #2e59d9;
        transform: scale(1.02);
    }
    .footer {
        text-align: center;
        margin-top: 40px;
        padding-top: 20px;
        border-top: 1px solid #eee;
    }
    </style>
    """, unsafe_allow_html=True)
    
    st.markdown('<p class="big-font">Bienvenue dans l\'Application de Calcul Scientifique</p>', unsafe_allow_html=True)
    
    with st.container():
        st.markdown('<div class="button-container">', unsafe_allow_html=True)
        
        if st.button("Outils Data Science"):
            st.session_state.current_page = "Data Science"
        
        if st.button("Gestion √ânerg√©tique"):
            st.session_state.current_page = "Gestion √ânerg√©tique"
        
        if st.button("Simulation: Laser"):
            st.session_state.current_page = "Applications Laser"
        
        if st.button("Equations: Navier-Stokes"):
            st.session_state.current_page = "Navier-Stokes"
        
        if st.button("Num√©risation"):
            st.session_state.current_page = "Num√©risation"
        
        if st.button("Quitter", key="quit"):
            st.stop()
        
        st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown('<div class="footer">üî¨ CalculLAB - Plateforme Scientifique Compl√®te</div>', unsafe_allow_html=True)

# Barre lat√©rale pour la navigation
with st.sidebar:
    st.title("üî¨ CalculLAB")
    selected_page = st.selectbox(
        "Navigation",
        list(PAGES.values()),
        index=list(PAGES.values()).index(st.session_state.current_page)
    )
    
    if selected_page != st.session_state.current_page:
        st.session_state.current_page = selected_page
        st.experimental_rerun()

# Gestion des diff√©rentes pages
if st.session_state.current_page == "Accueil":
    show_home_page()

elif st.session_state.current_page == "Data Science":
    st.header("üìä Outils Data Science")
    st.write("Cette section est en cours de d√©veloppement...")
    # Ajouter ici le contenu pour Data Science

elif st.session_state.current_page == "Gestion √ânerg√©tique":
    st.header("‚ö° Gestion √ânerg√©tique")
    st.write("Cette section est en cours de d√©veloppement...")
    # Ajouter ici le contenu pour la Gestion √ânerg√©tique

elif st.session_state.current_page == "Navier-Stokes":
    st.header("üåä √âquations de Navier-Stokes")
    st.write("Cette section est en cours de d√©veloppement...")
    # Ajouter ici le contenu pour Navier-Stokes

elif st.session_state.current_page == "Num√©risation":
    st.header("üî¢ Num√©risation")
    st.write("Cette section est en cours de d√©veloppement...")
    # Ajouter ici le contenu pour la Num√©risation

# Ajouter ici les autres pages (Calcul d'int√©grale, Interpolation, etc.) 
# en copiant le code des modules pr√©c√©dents...
# (Le code des autres modules reste inchang√© par rapport √† la r√©ponse pr√©c√©dente)

# Exemple pour le module Applications Laser
elif st.session_state.current_page == "Applications Laser":
    st.header("üî¶ Applications Laser")
    
    app = st.selectbox("S√©lectionnez l'application", ["Pertes par cavit√©", "Profil gaussien"])
    
    if app == "Pertes par cavit√©":
        st.subheader("Calcul des pertes par cavit√© laser")
        
        col1, col2 = st.columns(2)
        with col1:
            R1 = st.number_input("R1 (r√©flexion M1)", min_value=0.90, max_value=0.9999, value=0.99, step=0.0001, format="%.4f")
            R2 = st.number_input("R2 (r√©flexion M2)", min_value=0.90, max_value=0.9999, value=0.99, step=0.0001, format="%.4f")
        with col2:
            internal_loss = st.number_input("Pertes internes (fraction)", min_value=0.0, max_value=0.1, value=0.005, step=0.0001, format="%.4f")
        
        if st.button("Calculer les pertes"):
            T1 = 1 - R1
            T2 = 1 - R2
            total_loss = T1 + T2 + 2 * internal_loss
            
            st.subheader("R√©sultats")
            st.write(f"Transmission M1 (T1): {T1:.4f}")
            st.write(f"Transmission M2 (T2): {T2:.4f}")
            st.write(f"Pertes internes (par passage): {internal_loss:.4f}")
            st.success(f"**Pertes totales (par aller-retour): {total_loss*100:.2f}%**")
            
            # Visualisation
            labels = ['T1', 'T2', 'Pertes internes']
            sizes = [T1, T2, 2*internal_loss]
            
            fig, ax = plt.subplots()
            ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)
            ax.axis('equal')
            ax.set_title("R√©partition des pertes")
            st.pyplot(fig)
    
    elif app == "Profil gaussien":
        st.subheader("Simulation du profil gaussien d'un faisceau laser")
        
        col1, col2 = st.columns(2)
        with col1:
            lam = st.number_input("Œª (nm)", min_value=200.0, max_value=2000.0, value=532.0)
            w0 = st.number_input("w‚ÇÄ (Œºm)", min_value=1.0, max_value=1000.0, value=50.0)
        with col2:
            z = st.number_input("z (mm)", min_value=-1000.0, max_value=1000.0, value=0.0)
            power = st.number_input("Puissance (mW)", min_value=0.01, value=10.0)
        
        if st.button("Afficher le profil gaussien"):
            lam_m = lam * 1e-9
            w0_m = w0 * 1e-6
            z_m = z * 1e-3
            power_w = power * 1e-3
            
            # Calcul des param√®tres
            zR = np.pi * w0_m**2 / lam_m   # Rayon de Rayleigh
            wz = w0_m * np.sqrt(1 + (z_m / zR)**2)   # Taille du faisceau √† z
            
            # Calcul de l'intensit√©
            r = np.linspace(-3*wz, 3*wz, 400)   # en m√®tres
            I0 = 2 * power_w / (np.pi * wz**2)
            I = I0 * np.exp(-2 * (r**2) / (wz**2))
            
            # Trac√©
            fig, ax = plt.subplots()
            ax.plot(r * 1e6, I, color="#1976D2", lw=2)
            ax.set_title(f"Profil Gaussien √† z = {z} mm")
            ax.set_xlabel("x (Œºm)")
            ax.set_ylabel("Intensit√© (W/m¬≤)")
            ax.grid(alpha=0.3)
            st.pyplot(fig)
            
            # Affichage des param√®tres
            st.subheader("Param√®tres du faisceau")
            st.write(f"Taille du faisceau √† z (w(z)): {wz*1e6:.2f} Œºm")
            st.write(f"Rayon de Rayleigh (zR): {zR*1e3:.2f} mm")
            st.write(f"Intensit√© maximale (I0): {I0:.2e} W/m¬≤")

# ... (Ajouter ici les autres modules comme dans la r√©ponse pr√©c√©dente)
